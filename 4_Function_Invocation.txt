Function Invocation and Variable Environment

//

var x = 1;
a();
b();
console.log(x);

function a(){
    var x=10;
    console.log(x);
}

function b(){
    var x=100;
    console.log(x);
}

global execution context

Phase 1: Memory creation phase

x: undefined
a: {function}
b: {function}

Phase 2: code execution phase

x: 1
p1 again:
x: undefined

p2 again:
x:10 - printed....

This is vanished ******

p_1 again:
x: undefined

p_2 again:
x:100 - printed ----

This is vanished ******

print 1 ******

The complete "global execution phase" is vanished...

Imp: Whenever we print or log it looks for the value in "that particular execution context"..

Whenever a function is invoked a local scope is created on its own in the JS Engine....